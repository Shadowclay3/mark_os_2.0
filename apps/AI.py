import random, json, time, string, requests, os
from telebot import types
url = "https://wewordle.org/gptapi/v1/android/turbo"
supports_stream = False
needs_auth = False


def _create_completion(model: str, messages: list, stream: bool, **kwargs):
    base = ''
    for message in messages:
        base += '%s: %s\n' % (message['role'], message['content'])
    base += 'assistant:'
    # randomize user id and app id
    _user_id = ''.join(random.choices(f'{string.ascii_lowercase}{string.digits}', k=16))
    _app_id = ''.join(random.choices(f'{string.ascii_lowercase}{string.digits}', k=31))
    # make current date with format utc
    _request_date = time.strftime("%Y-%m-%dT%H:%M:%S.000Z", time.gmtime())
    headers = {
        'accept': '*/*',
        'pragma': 'no-cache',
        'Content-Type': 'application/json',
        'Connection':'keep-alive'
        # user agent android client
        # 'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 10; SM-G975F Build/QP1A.190711.020)',
        
    }
    data = {
        "user": _user_id,
        "messages": [
            {"role": "user", "content": base}
        ],
        "subscriber": {
            "originalPurchaseDate": None,
            "originalApplicationVersion": None,
            "allPurchaseDatesMillis": {},
            "entitlements": {
                "active": {},
                "all": {}
            },
            "allPurchaseDates": {},
            "allExpirationDatesMillis": {},
            "allExpirationDates": {},
            "originalAppUserId": f"$RCAnonymousID:{_app_id}",
            "latestExpirationDate": None,
            "requestDate": _request_date,
            "latestExpirationDateMillis": None,
            "nonSubscriptionTransactions": [],
            "originalPurchaseDateMillis": None,
            "managementURL": None,
            "allPurchasedProductIdentifiers": [],
            "firstSeen": _request_date,
            "activeSubscriptions": []
        }
    }
    response = requests.post(url, headers=headers, data=json.dumps(data))
    if response.status_code == 200:
        _json = response.json()
        if 'message' in _json:
            yield _json['message']['content']
    else:
        return "error"

# Temporary For ChatCompletion Class
class ChatCompletion:
    @staticmethod
    def create(model: str, messages: list, provider: None or str, stream: bool = False, auth: str = False, **kwargs):
        kwargs['auth'] = auth
        if provider and needs_auth and not auth:
            return "error"
        try:
            return (_create_completion(model, messages, stream, **kwargs)
                    if stream else ''.join(_create_completion(model, messages, stream, **kwargs)))
        except:
            return "error"
        
def ask(chat: list):
    start_time = time.time()
    answer_ai = ChatCompletion.create(model='gpt-4', provider="BingHuan", messages=chat, stream=False)
    prefix = "assistant: "
    if answer_ai.startswith(prefix) or answer_ai.startswith(prefix.capitalize()): answer_ai = answer_ai[len(prefix):]
    prefix = "**assistant:** "
    if answer_ai.startswith(prefix) or answer_ai.startswith(prefix.capitalize()): answer_ai = answer_ai[len(prefix):]
    end_time = time.time()
    elapsed_time = end_time - start_time
    if elapsed_time < 60: response = f"‚è±*–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –∑–∞ {int(elapsed_time)}sec.*\n________________________________\n{answer_ai}"
    else:
        minutes = int(elapsed_time // 60)
        seconds = int(elapsed_time % 60)
        response = f"‚è±*–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –∑–∞ {minutes}min. {seconds}sec.*\n______________________________\n{answer_ai}"
    return answer_ai, response



def Gpt(user_id):
    default_config = \
{
    "text": "Gpt",
    "photo": "None",
    "video": "None",
    "voice": "None",
}
    try:
        with open(f"user_config/user_{user_id}.json", 'r', encoding='utf-8') as file:
            data = json.load(file)
            if not data:
                data = default_config
    except FileNotFoundError:
        data = default_config
    if not data:
        os.makedirs(os.path.dirname(f"user_config/user_{user_id}.json"), exist_ok=True)
        with open(f"user_config/user_{user_id}.json", 'w', encoding='utf-8') as file:
            json.dump(data, file)
    from telebot import types
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start = types.KeyboardButton(text="/start - –û—Ä–∏–º–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    setting = types.KeyboardButton(text="/setting - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è AI —Ç–∞ —á–∞—Ç–∞–º–∏")
    clean_chat = types.KeyboardButton(text="/clean_chat - –ü–æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∞—à–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI")
    help_ = types.KeyboardButton(text="/help - –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏")
    button_1 = types.KeyboardButton(text=" ")
    button_2 = types.KeyboardButton(text="‚èπ")
    button_3 = types.KeyboardButton(text=" ")
    reply_markup.add(start)
    reply_markup.add(setting)
    reply_markup.add(clean_chat)
    reply_markup.add(help_)
    reply_markup.add(button_1, button_2, button_3)
    stroka_sostoyaniya = "*ChatGPT:*"
    return stroka_sostoyaniya, reply_markup

'''                                      –†–æ–ª—ñ                                          '''
roles = types.InlineKeyboardMarkup()
bez_roles = types.InlineKeyboardButton(                text="üö´üé≠ –±–µ–∑ —Ä–æ–ª–µ–π",       callback_data='role_bez_roles')
Matematuk = types.InlineKeyboardButton(                text="üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫",         callback_data='role_Matematuk')
Ruskij = types.InlineKeyboardButton(                   text="üá∑üá∫ –†–æ—Å—ñ—è–Ω–∏–Ω",           callback_data='role_Ruskij')
Secret_Agent = types.InlineKeyboardButton(             text="üïµÔ∏è‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–∏–π –ê–≥–µ–Ω—Ç",   callback_data='role_Secret_Agent')
Doctor = types.InlineKeyboardButton(                   text="üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä",            callback_data='role_Doctor')
Poet = types.InlineKeyboardButton(                     text="üìú –ü–æ–µ—Ç",              callback_data='role_Poet')
Child = types.InlineKeyboardButton(                    text="üë∂ –î–∏—Ç—è",              callback_data='role_Child')
Super_Programer = types.InlineKeyboardButton(          text="üë®‚Äçüíª —Å—É–ø–µ—Ä –ü—Ä–æ–≥—Ä–æ–º—ñ—Å—Ç",  callback_data='role_Super_Programer')
roles.add(bez_roles, Matematuk)
roles.add(Ruskij, Secret_Agent)
roles.add(Doctor, Poet)
roles.add(Child, Super_Programer)


'''                                    –¢–µ—Ö-–ø—ñ–¥—Ç—Ä–∏–º–∫–∞                                        '''
teh_pidtrumka = types.InlineKeyboardMarkup()
teh_pidtrumka.add(types.InlineKeyboardButton('–¢–µ—Ö –ø—ñ–¥—Ç—Ä–∏–º–∫–∞', url="https://t.me/marklanselot"))


def command_start(message, bot):
    bot.send_message(message.chat.id, '<b>–ó–¥–æ—Ä–æ–≤–µ—å–∫—ã –±—É–ª–∏! üëã\n\n–¶–µ–π –±–æ—Ç ü§ñ –≤–ª–∞—Å–Ω—ñ—Å—Ç—å @marklanselot</b>', parse_mode='HTML')
    bot.send_message(message.chat.id, "<b>–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–¥–∏–≤–∏—Å—å–Ω–æ –≤ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É\n\n/help\n\n–Ø —Å–ø—Ä–æ–±—É—é —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏)</b>", parse_mode='HTML')
    bot.send_message(message.chat.id, "<b>–Ø–∫—â–æ –±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∏–∂—á–µ</b>", reply_markup=teh_pidtrumka, parse_mode='HTML')

def command_setting(message, bot):
    default_config = { "GPT":{ "history_chat": False, "response_time": False }}
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(f"user_config/setting/{message.chat.id}.json"):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with open(f"user_config/setting/{message.chat.id}.json", "w") as file:
            json.dump(default_config, file)

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    with open(f"user_config/setting/{message.chat.id}.json", "r") as file:
        config = json.load(file)
    set1 = config['GPT']['history_chat']; set2 = config['GPT']['response_time']
    if set1 == True: set1 = "‚úÖ"
    else: set1 = "‚ùå"
    if set2 == True: set2 = "‚úÖ"
    else: set2 = "‚ùå"

    '''                                    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è                                   '''
    setting = types.InlineKeyboardMarkup()
    setting.add(types.InlineKeyboardButton(         f"–í–∏–º–∫–Ω—É—Ç–∏ –ø–∞–º'—è—Ç—å –≤ AI? | {set1}"           ,callback_data='set1'))
    setting.add(types.InlineKeyboardButton(  f"–ü–∏—Å–∞—Ç–∏ –∑–∞ —è–∫–∏–π —á–∞—Å –¥–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å? | {set2}"      ,callback_data='set2'))
    bot.send_message(message.chat.id, "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b> ‚öôÔ∏è", reply_markup=setting, parse_mode='HTML')

def command_clean_chat(message, bot):
    bot.send_message(message.chat.id, "üßπ <b>–ß–∞—Ç –æ—á–∏—â–µ–Ω–æ!</b> üßπ", parse_mode='HTML')

def command_help(message, bot):
    bot.send_message(message.chat.id, "/start - –û—Ä–∏–º–∞—Ç–∏ <b>–ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n/setting - <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b> –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è AI —Ç–∞ —á–∞—Ç–∞–º–∏\n\n/clean_chat - <b>–ü–æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é</b> –≤–∞—à–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI\n\n/roles - –ú–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É <b>—Ä–æ–ª—ñ</b> –¥–ª—è AI\n\n–ø—Ä–æ—Å—Ç–æ <b>–Ω–∞–ø–∏—à–∏</b> —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è",  parse_mode="HTML")